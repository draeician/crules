# Cursor Rules

## Core Principles
1. Follow consistent code formatting and style guidelines
2. Write clear and descriptive variable and function names
3. Include appropriate comments and documentation
4. Handle errors and edge cases appropriately
5. Write modular and reusable code
6. Follow version control best practices
7. Implement proper testing
8. Consider performance implications
9. Maintain security best practices
10. Keep code DRY (Don't Repeat Yourself)

## Project Structure
- Maintain clear project structure with separate directories for:
  - src/ (source code)
  - tests/ (unit and integration tests)
  - docs/ (documentation)
  - config/ (configuration files)
- Use modular design with distinct files for:
  - models
  - services
  - controllers
  - utilities

## Development Guidelines
### Code Quality
- Use type hints consistently
- Write comprehensive docstrings (Google style)
- Follow language-specific style guides (e.g., PEP 8 for Python)
- Implement error handling with proper context
- Add logging for debugging and monitoring
- Write unit tests for new functionality
- Maintain test coverage targets

### Documentation
- Keep README.md current with setup and usage instructions
- Document API endpoints and interfaces
- Include examples for complex functionality
- Update CHANGELOG.md for version changes
- Use docstrings for all public functions and classes

### Version Control
- Follow conventional commits format:
  ```
  <type>[optional scope]: <description>
  
  [optional body]
  [optional footer(s)]
  ```
- Types: feat, fix, docs, style, refactor, test, chore
- Keep commits focused and atomic
- Write clear commit messages (imperative mood)
- Reference issues in commits when applicable

### Project Management
- Track tasks and issues in project management system
- Update project status regularly
- Document decisions and their rationale
- Follow defined release process

## File Management
### Important Files
- **project_spec.md**: Project objectives, scope, requirements
- **CHANGELOG.md**: Version changes and updates
- **README.md**: Project overview and setup instructions
- **requirements.txt/pyproject.toml**: Dependencies
- **.gitignore**: Version control exclusions

### Release Process
1. Update version numbers in relevant files
2. Update CHANGELOG.md with new version:
   ```markdown
   ## [VERSION] - YYYY-MM-DD
   ### Added
   - New features
   ### Changed
   - Modified features
   ### Fixed
   - Bug fixes
   ### Deprecated
   - Soon-to-be removed features
   ### Removed
   - Removed features
   ```
3. Create and push version tag
4. Update documentation
5. Create release notes

## Best Practices
### Security
- Never commit sensitive data (API keys, credentials)
- Use environment variables for configuration
- Implement proper authentication/authorization
- Follow security best practices for dependencies

### Performance
- Profile code for bottlenecks
- Optimize database queries
- Use appropriate data structures
- Consider scalability in design decisions

### Testing
- Write unit tests for new code
- Include integration tests for critical paths
- Maintain high test coverage
- Use test-driven development when appropriate

### Code Review
- Review all code changes
- Use pull requests for significant changes
- Provide constructive feedback
- Check for security implications

## AI Integration Guidelines
- Use descriptive variable and function names
- Add context in comments for complex logic
- Provide rich error context for debugging
- Document assumptions and edge cases
- Use type hints for better code understanding

## Maintenance
- Keep dependencies updated
- Remove deprecated code
- Refactor when complexity increases
- Monitor and address technical debt
- Keep documentation current

## Continuous Integration
- Automate builds and tests
- Run linters and formatters
- Check test coverage
- Verify documentation builds
- Deploy to staging environments

Remember to adapt these guidelines based on project-specific requirements and team preferences.
