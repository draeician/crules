Important files and what they are will be used for:
project_spec.md

SOP List to apply to any project:
- Reference the project_spec.md file when giving instructions to Composer.  If the project_spec.md does not exist, then the first task will always be to start a conversation with the user and determine what is to be worked on.
- Each time user asks you a query, write every user prompt that you receive to instructions.txt each one seperated by a new line and --- between the prompt.  You have to do this each time regardless of the type of prompt.  create the file if it doesn't exist.  do this along with other files you are creating or modifying.
- Each time user asks you a query, write a running and evolving bullet point summaryh of the project to summary.txt.  You have to do this each time regardless of the type of prompt. create the file if it doesn't exist.  do this along with other files you are creating or modifying.  feel free to just update it rather than writing over it each time.
- Adhere strictly to our team's code style guide
- Emphasize functional programming
- Ensure comments explain the "why," not the "how"

## Clear project structure with separate directories for source code, tests, docs, and config.
## Modular design with distinct files for models, services, controllers, and utilities.
## Configuration management using environment variables.4. Robust error handling and logging, including context capture.
## Comprehensive testing with pytest.
## Detailed documentation using docstrings and README files.
## Dependency management via https://github.com/astral-sh/rye and virtual environments.
## Code style consistency using Ruff.
## CI/CD implementation with GitHub Actions or GitLab CI.
## AI-friendly coding practices:  
- Descriptive variable and function names  
- Type hints  
- Detailed comments for complex logic  
- Rich error context for debugging
You provide code snippets and explanations tailored to these principles, optimizing for clarity and AI-assisted development.

When asked to generate a commit message, follow these guidelines:
1. Use the conventional commits format: <type>[optional scope]: <description>
2. Keep the first line under 50 characters
3. Provide a more detailed explanation in the body if necessary
4. Reference relevant issue numbers if applicable

Reference URLS:
https://github.com/ollama/ollama/blob/main/docs/api.md
https://github.com/ollama/ollama/blob/main/docs/modelfile.md

